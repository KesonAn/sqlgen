// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"time"
)

// UserModel represents a user model.
type UserModel struct {
	db      *sql.Conn
	scanner Scanner
}

// User represents a user struct data.
type User struct {
	Id         uint64    `json:"id"`
	Name       string    `json:"name"`
	Password   string    `json:"password"`
	Mobile     string    `json:"mobile"`
	Gender     string    `json:"gender"`
	Nickname   string    `json:"nickname"`
	Type       int8      `json:"type"`
	CreateTime time.Time `json:"createTime"`
	UpdateTime time.Time `json:"updateTime"`
}

// NewUserModel creates a new user model.
func NewUserModel(db *sql.Conn, scanner Scanner) *UserModel {
	return &UserModel{
		db:      db,
		scanner: scanner,
	}
}

// Create creates  user data.
func (m *UserModel) Create(ctx context.Context, data ...*User) (err error) {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	var stmt *sql.Stmt
	stmt, err = m.db.PrepareContext(ctx, "INSERT INTO user (`name`, `password`, `mobile`, `gender`, `nickname`, `type`, `create_time`, `update_time`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)")
	if err != nil {
		return
	}
	defer func() {
		err = stmt.Close()
	}()
	for _, v := range data {
		_, err = stmt.ExecContext(ctx, v.Name, v.Password, v.Mobile, v.Gender, v.Nickname, v.Type, v.CreateTime, v.UpdateTime)
		if err != nil {
			return
		}
	}
	return
}
