// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"time"

	"xorm.io/builder"
)

// UserModel represents a user model.
type UserModel struct {
	db      *sql.Conn
	scanner Scanner
}

// User represents a user struct data.
type User struct {
	Id         uint64    `json:"id"`
	Name       string    `json:"name"`
	Password   string    `json:"password"`
	Mobile     string    `json:"mobile"`
	Gender     string    `json:"gender"`
	Nickname   string    `json:"nickname"`
	Type       int8      `json:"type"`
	CreateTime time.Time `json:"createTime"`
	UpdateTime time.Time `json:"updateTime"`
}

// DeleteWhereParameter is a where parameter structure.
type DeleteWhereParameter struct {
	IdEqual uint64
}

// DeleteByNameWhereParameter is a where parameter structure.
type DeleteByNameWhereParameter struct {
	NameEqual string
}

// DeleteByNameAndMobileWhereParameter is a where parameter structure.
type DeleteByNameAndMobileWhereParameter struct {
	NameEqual   string
	MobileEqual string
}

// DeleteOrderByIDWhereParameter is a where parameter structure.
type DeleteOrderByIDWhereParameter struct {
	IdEqual uint64
}

// DeleteOrderByIDLimitWhereParameter is a where parameter structure.
type DeleteOrderByIDLimitWhereParameter struct {
	IdEqual uint64
}

// DeleteOrderByIDLimitLimitParameter is a limit parameter structure.
type DeleteOrderByIDLimitLimitParameter struct {
	Count int
}

// NewUserModel creates a new user model.
func NewUserModel(db *sql.Conn, scanner Scanner) *UserModel {
	return &UserModel{
		db:      db,
		scanner: scanner,
	}
}

// Create creates  user data.
func (m *UserModel) Create(ctx context.Context, data ...*User) (err error) {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	var stmt *sql.Stmt
	stmt, err = m.db.PrepareContext(ctx, "INSERT INTO user (`name`, `password`, `mobile`, `gender`, `nickname`, `type`, `create_time`, `update_time`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)")
	if err != nil {
		return
	}
	defer func() {
		err = stmt.Close()
	}()
	for _, v := range data {
		_, err = stmt.ExecContext(ctx, v.Name, v.Password, v.Mobile, v.Gender, v.Nickname, v.Type, v.CreateTime, v.UpdateTime)
		if err != nil {
			return
		}
	}
	return
}

// Delete is generated from sql:
// delete from user where id = ?;
func (m *UserModel) Delete(ctx context.Context, where DeleteWhereParameter) error {
	b := builder.Delete()
	b.From("`user`")
	b.Where(builder.Expr(`id = ?`, where.IdEqual))
	query, args, err := b.ToSQL()
	if err != nil {
		return err
	}
	_, err = m.db.ExecContext(ctx, query, args...)
	return err
}

// DeleteByName is generated from sql:
// delete from user where name = ?;
func (m *UserModel) DeleteByName(ctx context.Context, where DeleteByNameWhereParameter) error {
	b := builder.Delete()
	b.From("`user`")
	b.Where(builder.Expr(`name = ?`, where.NameEqual))
	query, args, err := b.ToSQL()
	if err != nil {
		return err
	}
	_, err = m.db.ExecContext(ctx, query, args...)
	return err
}

// DeleteByNameAndMobile is generated from sql:
// delete from user where name = ? and mobile = ?;
func (m *UserModel) DeleteByNameAndMobile(ctx context.Context, where DeleteByNameAndMobileWhereParameter) error {
	b := builder.Delete()
	b.From("`user`")
	b.Where(builder.Expr(`name = ? AND mobile = ?`, where.NameEqual, where.MobileEqual))
	query, args, err := b.ToSQL()
	if err != nil {
		return err
	}
	_, err = m.db.ExecContext(ctx, query, args...)
	return err
}

// DeleteOrderByID is generated from sql:
// delete from user where id = ? order by id desc;
func (m *UserModel) DeleteOrderByID(ctx context.Context, where DeleteOrderByIDWhereParameter) error {
	b := builder.Delete()
	b.From("`user`")
	b.Where(builder.Expr(`id = ?`, where.IdEqual))
	b.OrderBy(`id desc`)
	query, args, err := b.ToSQL()
	if err != nil {
		return err
	}
	_, err = m.db.ExecContext(ctx, query, args...)
	return err
}

// DeleteOrderByIDLimit is generated from sql:
// delete from user where id = ? order by id desc limit 10;
func (m *UserModel) DeleteOrderByIDLimit(ctx context.Context, where DeleteOrderByIDLimitWhereParameter, limit DeleteOrderByIDLimitLimitParameter) error {
	b := builder.Delete()
	b.From("`user`")
	b.Where(builder.Expr(`id = ?`, where.IdEqual))
	b.OrderBy(`id desc`)
	b.Limit(limit.Count)
	query, args, err := b.ToSQL()
	if err != nil {
		return err
	}
	_, err = m.db.ExecContext(ctx, query, args...)
	return err
}
