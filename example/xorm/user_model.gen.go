// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"xorm.io/xorm"
)

// UserModel represents a user model.
type UserModel struct {
	engine xorm.EngineInterface
}

// User represents a user struct data.
type User struct {
	Id       uint64    `xorm:"pk autoincr 'id'" json:"id"`
	Name     string    `xorm:"'name'" json:"name"`
	Password string    `xorm:"'password'" json:"password"`
	Mobile   string    `xorm:"'mobile'" json:"mobile"`
	Gender   string    `xorm:"'gender'" json:"gender"`
	Nickname string    `xorm:"'nickname'" json:"nickname"`
	Type     int8      `xorm:"'type'" json:"type"`
	CreateAt time.Time `xorm:"'create_at'" json:"createAt"`
	UpdateAt time.Time `xorm:"'update_at'" json:"updateAt"`
}

// FindOneWhereParameter is a where parameter structure.
type FindOneWhereParameter struct {
	IdEqual uint64
}

// FindOneByNameWhereParameter is a where parameter structure.
type FindOneByNameWhereParameter struct {
	NameEqual string
}

// FindOneGroupByNameWhereParameter is a where parameter structure.
type FindOneGroupByNameWhereParameter struct {
	NameEqual string
}

// FindOneGroupByNameHavingNameWhereParameter is a where parameter structure.
type FindOneGroupByNameHavingNameWhereParameter struct {
	NameEqual string
}

// FindOneGroupByNameHavingNameHavingParameter is a having parameter structure.
type FindOneGroupByNameHavingNameHavingParameter struct {
	NameEqual string
}

// FindLimitWhereParameter is a where parameter structure.
type FindLimitWhereParameter struct {
	IdGT uint64
}

// FindLimitLimitParameter is a limit parameter structure.
type FindLimitLimitParameter struct {
	Count int
}

// FindLimitOffsetLimitParameter is a limit parameter structure.
type FindLimitOffsetLimitParameter struct {
	Count  int
	Offset int
}

// FindGroupLimitOffsetWhereParameter is a where parameter structure.
type FindGroupLimitOffsetWhereParameter struct {
	IdGT uint64
}

// FindGroupLimitOffsetLimitParameter is a limit parameter structure.
type FindGroupLimitOffsetLimitParameter struct {
	Count  int
	Offset int
}

// FindGroupHavingLimitOffsetWhereParameter is a where parameter structure.
type FindGroupHavingLimitOffsetWhereParameter struct {
	IdGT uint64
}

// FindGroupHavingLimitOffsetHavingParameter is a having parameter structure.
type FindGroupHavingLimitOffsetHavingParameter struct {
	IdGT uint64
}

// FindGroupHavingLimitOffsetLimitParameter is a limit parameter structure.
type FindGroupHavingLimitOffsetLimitParameter struct {
	Count  int
	Offset int
}

// FindGroupHavingOrderAscLimitOffsetWhereParameter is a where parameter structure.
type FindGroupHavingOrderAscLimitOffsetWhereParameter struct {
	IdGT uint64
}

// FindGroupHavingOrderAscLimitOffsetHavingParameter is a having parameter structure.
type FindGroupHavingOrderAscLimitOffsetHavingParameter struct {
	IdGT uint64
}

// FindGroupHavingOrderAscLimitOffsetLimitParameter is a limit parameter structure.
type FindGroupHavingOrderAscLimitOffsetLimitParameter struct {
	Count  int
	Offset int
}

// FindGroupHavingOrderDescLimitOffsetWhereParameter is a where parameter structure.
type FindGroupHavingOrderDescLimitOffsetWhereParameter struct {
	IdGT uint64
}

// FindGroupHavingOrderDescLimitOffsetHavingParameter is a having parameter structure.
type FindGroupHavingOrderDescLimitOffsetHavingParameter struct {
	IdGT uint64
}

// FindGroupHavingOrderDescLimitOffsetLimitParameter is a limit parameter structure.
type FindGroupHavingOrderDescLimitOffsetLimitParameter struct {
	Count  int
	Offset int
}

// FindOnePartWhereParameter is a where parameter structure.
type FindOnePartWhereParameter struct {
	IdGT uint64
}

// FindAllCountResult is a find all count result.
type FindAllCountResult struct {
	CountID uint64 `xorm:"'countID'" json:"countID"`
}

// FindAllCountWhereWhereParameter is a where parameter structure.
type FindAllCountWhereWhereParameter struct {
	IdGT uint64
}

// FindAllCountWhereResult is a find all count where result.
type FindAllCountWhereResult struct {
	CountID uint64 `xorm:"'countID'" json:"countID"`
}

// FindMaxIDResult is a find max id result.
type FindMaxIDResult struct {
	MaxID uint64 `xorm:"'maxID'" json:"maxID"`
}

// FindMinIDResult is a find min id result.
type FindMinIDResult struct {
	MinID uint64 `xorm:"'minID'" json:"minID"`
}

// FindAvgIDResult is a find avg id result.
type FindAvgIDResult struct {
	AvgID uint64 `xorm:"'avgID'" json:"avgID"`
}

// UpdateWhereParameter is a where parameter structure.
type UpdateWhereParameter struct {
	IdEqual uint64
}

// UpdateOrderByIdDescWhereParameter is a where parameter structure.
type UpdateOrderByIdDescWhereParameter struct {
	IdEqual uint64
}

// UpdateOrderByIdDescLimitCountWhereParameter is a where parameter structure.
type UpdateOrderByIdDescLimitCountWhereParameter struct {
	IdEqual uint64
}

// DeleteOneWhereParameter is a where parameter structure.
type DeleteOneWhereParameter struct {
	IdEqual uint64
}

// DeleteOneByNameWhereParameter is a where parameter structure.
type DeleteOneByNameWhereParameter struct {
	NameEqual string
}

// DeleteOneOrderByIDAscWhereParameter is a where parameter structure.
type DeleteOneOrderByIDAscWhereParameter struct {
	NameEqual string
}

// DeleteOneOrderByIDDescWhereParameter is a where parameter structure.
type DeleteOneOrderByIDDescWhereParameter struct {
	NameEqual string
}

// DeleteOneOrderByIDDescLimitCountWhereParameter is a where parameter structure.
type DeleteOneOrderByIDDescLimitCountWhereParameter struct {
	NameEqual string
}

// DeleteOneOrderByIDDescLimitCountLimitParameter is a limit parameter structure.
type DeleteOneOrderByIDDescLimitCountLimitParameter struct {
	Count int
}

func (User) TableName() string {
	return "user"
}

// NewUserModel returns a new user model.
func NewUserModel(engine xorm.EngineInterface) *UserModel {
	return &UserModel{engine: engine}
}

// Insert creates  user data.
func (m *UserModel) Insert(ctx context.Context, data ...*User) error {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	var session = m.engine.Context(ctx)
	var list []User
	for _, v := range data {
		list = append(list, *v)
	}

	_, err := session.Insert(&list)
	return err
}

// FindOne is generated from sql:
// select * from `user` where `id` = ? limit 1;
func (m *UserModel) FindOne(ctx context.Context, where FindOneWhereParameter) (*User, error) {
	var result = new(User)
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id = ?`, where.IdEqual)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindOneByName is generated from sql:
// select * from `user` where `name` = ? limit 1;
func (m *UserModel) FindOneByName(ctx context.Context, where FindOneByNameWhereParameter) (*User, error) {
	var result = new(User)
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`name = ?`, where.NameEqual)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindOneGroupByName is generated from sql:
// select * from `user` where `name` = ? group by name limit 1;
func (m *UserModel) FindOneGroupByName(ctx context.Context, where FindOneGroupByNameWhereParameter) (*User, error) {
	var result = new(User)
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`name = ?`, where.NameEqual)
	session.GroupBy(`name`)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindOneGroupByNameHavingName is generated from sql:
// select * from `user` where `name` = ? group by name having name = ? limit 1;
func (m *UserModel) FindOneGroupByNameHavingName(ctx context.Context, where FindOneGroupByNameHavingNameWhereParameter, having FindOneGroupByNameHavingNameHavingParameter) (*User, error) {
	var result = new(User)
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`name = ?`, where.NameEqual)
	session.GroupBy(`name`)
	session.Having(fmt.Sprintf(`name = '%v'`, having.NameEqual))
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindAll is generated from sql:
// select * from `user`;
func (m *UserModel) FindAll(ctx context.Context) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	err := session.Find(&result)
	return result, err
}

// FindLimit is generated from sql:
// select * from `user` where id > ? limit ?;
func (m *UserModel) FindLimit(ctx context.Context, where FindLimitWhereParameter, limit FindLimitLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id > ?`, where.IdGT)
	session.Limit(limit.Count)
	err := session.Find(&result)
	return result, err
}

// FindLimitOffset is generated from sql:
// select * from `user` limit ?, ?;
func (m *UserModel) FindLimitOffset(ctx context.Context, limit FindLimitOffsetLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Limit(limit.Count, limit.Offset)
	err := session.Find(&result)
	return result, err
}

// FindGroupLimitOffset is generated from sql:
// select * from `user` where id > ? group by name limit ?, ?;
func (m *UserModel) FindGroupLimitOffset(ctx context.Context, where FindGroupLimitOffsetWhereParameter, limit FindGroupLimitOffsetLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id > ?`, where.IdGT)
	session.GroupBy(`name`)
	session.Limit(limit.Count, limit.Offset)
	err := session.Find(&result)
	return result, err
}

// FindGroupHavingLimitOffset is generated from sql:
// select * from `user` where id > ? group by name having id > ? limit ?, ?;
func (m *UserModel) FindGroupHavingLimitOffset(ctx context.Context, where FindGroupHavingLimitOffsetWhereParameter, having FindGroupHavingLimitOffsetHavingParameter, limit FindGroupHavingLimitOffsetLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id > ?`, where.IdGT)
	session.GroupBy(`name`)
	session.Having(fmt.Sprintf(`id > '%v'`, having.IdGT))
	session.Limit(limit.Count, limit.Offset)
	err := session.Find(&result)
	return result, err
}

// FindGroupHavingOrderAscLimitOffset is generated from sql:
// select * from `user` where id > ? group by name having id > ? order by id limit ?, ?;
func (m *UserModel) FindGroupHavingOrderAscLimitOffset(ctx context.Context, where FindGroupHavingOrderAscLimitOffsetWhereParameter, having FindGroupHavingOrderAscLimitOffsetHavingParameter, limit FindGroupHavingOrderAscLimitOffsetLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id > ?`, where.IdGT)
	session.GroupBy(`name`)
	session.Having(fmt.Sprintf(`id > '%v'`, having.IdGT))
	session.OrderBy(`id`)
	session.Limit(limit.Count, limit.Offset)
	err := session.Find(&result)
	return result, err
}

// FindGroupHavingOrderDescLimitOffset is generated from sql:
// select * from `user` where id > ? group by name having id > ? order by id desc limit ?, ?;
func (m *UserModel) FindGroupHavingOrderDescLimitOffset(ctx context.Context, where FindGroupHavingOrderDescLimitOffsetWhereParameter, having FindGroupHavingOrderDescLimitOffsetHavingParameter, limit FindGroupHavingOrderDescLimitOffsetLimitParameter) ([]*User, error) {
	var result []*User
	var session = m.engine.Context(ctx)
	session.Select(`*`)
	session.Where(`id > ?`, where.IdGT)
	session.GroupBy(`name`)
	session.Having(fmt.Sprintf(`id > '%v'`, having.IdGT))
	session.OrderBy(`id desc`)
	session.Limit(limit.Count, limit.Offset)
	err := session.Find(&result)
	return result, err
}

// FindOnePart is generated from sql:
// select `name`, `password`, `mobile` from `user` where id > ? limit 1;
func (m *UserModel) FindOnePart(ctx context.Context, where FindOnePartWhereParameter) (*User, error) {
	var result = new(User)
	var session = m.engine.Context(ctx)
	session.Select(`name, password, mobile`)
	session.Where(`id > ?`, where.IdGT)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindAllCount is generated from sql:
// select count(id) AS countID from `user`;
func (m *UserModel) FindAllCount(ctx context.Context) (*FindAllCountResult, error) {
	var result = new(FindAllCountResult)
	var session = m.engine.Context(ctx)
	session.Select(`count(id) AS countID`)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindAllCountWhere is generated from sql:
// select count(id) AS countID from `user` where id > ?;
func (m *UserModel) FindAllCountWhere(ctx context.Context, where FindAllCountWhereWhereParameter) (*FindAllCountWhereResult, error) {
	var result = new(FindAllCountWhereResult)
	var session = m.engine.Context(ctx)
	session.Select(`count(id) AS countID`)
	session.Where(`id > ?`, where.IdGT)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindMaxID is generated from sql:
// select max(id) AS maxID from `user`;
func (m *UserModel) FindMaxID(ctx context.Context) (*FindMaxIDResult, error) {
	var result = new(FindMaxIDResult)
	var session = m.engine.Context(ctx)
	session.Select(`max(id) AS maxID`)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindMinID is generated from sql:
// select min(id) AS minID from `user`;
func (m *UserModel) FindMinID(ctx context.Context) (*FindMinIDResult, error) {
	var result = new(FindMinIDResult)
	var session = m.engine.Context(ctx)
	session.Select(`min(id) AS minID`)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// FindAvgID is generated from sql:
// select avg(id) AS avgID from `user`;
func (m *UserModel) FindAvgID(ctx context.Context) (*FindAvgIDResult, error) {
	var result = new(FindAvgIDResult)
	var session = m.engine.Context(ctx)
	session.Select(`avg(id) AS avgID`)
	session.Limit(1)
	_, err := session.Get(result)
	return result, err
}

// Update is generated from sql:
// update `user` set `name` = ?, `password` = ?, `mobile` = ?, `gender` = ?, `nickname` = ?, `type` = ?, `create_at` = ?, `update_at` = ? where `id` = ?;
func (m *UserModel) Update(ctx context.Context, data *User, where UpdateWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`id = ?`, where.IdEqual)
	_, err := session.Update(map[string]interface{}{
		"name":      data.Name,
		"password":  data.Password,
		"mobile":    data.Mobile,
		"gender":    data.Gender,
		"nickname":  data.Nickname,
		"type":      data.Type,
		"create_at": data.CreateAt,
		"update_at": data.UpdateAt,
	})
	return err
}

// UpdateOrderByIdDesc is generated from sql:
// update `user` set `name` = ?, `password` = ?, `mobile` = ?, `gender` = ?, `nickname` = ?, `type` = ?, `create_at` = ?, `update_at` = ? where `id` = ? order by id desc;
func (m *UserModel) UpdateOrderByIdDesc(ctx context.Context, data *User, where UpdateOrderByIdDescWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`id = ?`, where.IdEqual)
	session.OrderBy(`id desc`)
	_, err := session.Update(map[string]interface{}{
		"name":      data.Name,
		"password":  data.Password,
		"mobile":    data.Mobile,
		"gender":    data.Gender,
		"nickname":  data.Nickname,
		"type":      data.Type,
		"create_at": data.CreateAt,
		"update_at": data.UpdateAt,
	})
	return err
}

// UpdateOrderByIdDescLimitCount is generated from sql:
// update `user` set `name` = ?, `password` = ?, `mobile` = ?, `gender` = ?, `nickname` = ?, `type` = ?, `create_at` = ?, `update_at` = ? where `id` = ? order by id desc;
func (m *UserModel) UpdateOrderByIdDescLimitCount(ctx context.Context, data *User, where UpdateOrderByIdDescLimitCountWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`id = ?`, where.IdEqual)
	session.OrderBy(`id desc`)
	_, err := session.Update(map[string]interface{}{
		"name":      data.Name,
		"password":  data.Password,
		"mobile":    data.Mobile,
		"gender":    data.Gender,
		"nickname":  data.Nickname,
		"type":      data.Type,
		"create_at": data.CreateAt,
		"update_at": data.UpdateAt,
	})
	return err
}

// DeleteOne is generated from sql:
// delete from `user` where `id` = ?;
func (m *UserModel) DeleteOne(ctx context.Context, where DeleteOneWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`id = ?`, where.IdEqual)
	_, err := session.Delete(&User{})
	return err
}

// DeleteOneByName is generated from sql:
// delete from `user` where `name` = ?;
func (m *UserModel) DeleteOneByName(ctx context.Context, where DeleteOneByNameWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`name = ?`, where.NameEqual)
	_, err := session.Delete(&User{})
	return err
}

// DeleteOneOrderByIDAsc is generated from sql:
// delete from `user` where `name` = ? order by id;
func (m *UserModel) DeleteOneOrderByIDAsc(ctx context.Context, where DeleteOneOrderByIDAscWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`name = ?`, where.NameEqual)
	session.OrderBy(`id`)
	_, err := session.Delete(&User{})
	return err
}

// DeleteOneOrderByIDDesc is generated from sql:
// delete from `user` where `name` = ? order by id desc;
func (m *UserModel) DeleteOneOrderByIDDesc(ctx context.Context, where DeleteOneOrderByIDDescWhereParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`name = ?`, where.NameEqual)
	session.OrderBy(`id desc`)
	_, err := session.Delete(&User{})
	return err
}

// DeleteOneOrderByIDDescLimitCount is generated from sql:
// delete from `user` where `name` = ? order by id desc limit ?;
func (m *UserModel) DeleteOneOrderByIDDescLimitCount(ctx context.Context, where DeleteOneOrderByIDDescLimitCountWhereParameter, limit DeleteOneOrderByIDDescLimitCountLimitParameter) error {
	var session = m.engine.Context(ctx)
	session.Where(`name = ?`, where.NameEqual)
	session.OrderBy(`id desc`)
	session.Limit(limit.Count)
	_, err := session.Delete(&User{})
	return err
}
