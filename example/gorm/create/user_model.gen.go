// generated by sqlgen, do not edit.

package model

import (
	"context"
	"fmt"
	"time"

	"gorm.io/gorm"
)

// UserModel represents a user model.
type UserModel struct {
	db gorm.DB
}

// User represents a user struct data.
type User struct {
	Id         uint64    `gorm:"primaryKey;autoIncrement;column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
}

// TableName returns the table name. it implemented by gorm.Tabler.
func (User) TableName() string {
	return "user"
}

// Create creates  user data.
func (m *UserModel) Create(ctx context.Context, data ...*User) error {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	db := m.db.WithContext(ctx)
	return db.Create(&data).Error
}
