// Code generated by sqlgen. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"gorm.io/gorm"
)

// UserModel represents a user model.
type UserModel struct {
	db gorm.DB
}

// User represents a user struct data.
type User struct {
	Id         uint64    `gorm:"primaryKey;autoIncrement;column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
}

// FindOneWhereParameter is a where parameter structure.
type FindOneWhereParameter struct {
	IdEqual uint64
}

// FindByNameWhereParameter is a where parameter structure.
type FindByNameWhereParameter struct {
	NameEqual string
}

// FindOnePartWhereParameter is a where parameter structure.
type FindOnePartWhereParameter struct {
	IdEqual uint64
}

// FindByNamePartWhereParameter is a where parameter structure.
type FindByNamePartWhereParameter struct {
	NameEqual string
}

// FindAllCountResult is a find all count result.
type FindAllCountResult struct {
	Count int64 `gorm:"column:count" json:"count"`
}

// FindAllPartCountResult is a find all part count result.
type FindAllPartCountResult struct {
	Count uint64 `gorm:"column:count" json:"count"`
}

// FindOneByNameAndPasswordWhereParameter is a where parameter structure.
type FindOneByNameAndPasswordWhereParameter struct {
	NameEqual     string
	PasswordEqual string
}

// ListUserByNameAscWhereParameter is a where parameter structure.
type ListUserByNameAscWhereParameter struct {
	IdGT uint64
}

// ListUserByNameAscHavingCountTypeGtWhereParameter is a where parameter structure.
type ListUserByNameAscHavingCountTypeGtWhereParameter struct {
	IdGT uint64
}

// ListUserByNameAscHavingCountTypeGtHavingParameter is a having parameter structure.
type ListUserByNameAscHavingCountTypeGtHavingParameter struct {
	TypeCountGT int8
}

// ListUserByNameAscHavingCountTypeGtResult is a list user by name asc having count type gt result.
type ListUserByNameAscHavingCountTypeGtResult struct {
	Id         uint64    `gorm:"column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
	TypeCount  int8      `gorm:"column:typeCount" json:"typeCount"`
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescWhereParameter is a where parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescWhereParameter struct {
	IdGT uint64
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescHavingParameter is a having parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescHavingParameter struct {
	TypeCountGT int8
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescResult is a list user by name desc having count type gt order by id desc result.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescResult struct {
	Id         uint64    `gorm:"column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
	TypeCount  int8      `gorm:"column:typeCount" json:"typeCount"`
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10WhereParameter is a where parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10WhereParameter struct {
	IdGT uint64
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10HavingParameter is a having parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10HavingParameter struct {
	TypeCountGT int8
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10LimitParameter is a limit parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10LimitParameter struct {
	Count int
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Result is a list user by name desc having count type gt order by id desc limit 10 result.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Result struct {
	Id         uint64    `gorm:"column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
	TypeCount  int8      `gorm:"column:typeCount" json:"typeCount"`
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10WhereParameter is a where parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10WhereParameter struct {
	IdGT uint64
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10HavingParameter is a having parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10HavingParameter struct {
	TypeCountGT int8
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10LimitParameter is a limit parameter structure.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10LimitParameter struct {
	Count  int
	Offset int
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10Result is a list user by name desc having count type gt order by id desc limit 10 offset 10 result.
type ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10Result struct {
	Id         uint64    `gorm:"column:id" json:"id"`
	Name       string    `gorm:"column:name" json:"name"`
	Password   string    `gorm:"column:password" json:"password"`
	Mobile     string    `gorm:"column:mobile" json:"mobile"`
	Gender     string    `gorm:"column:gender" json:"gender"`
	Nickname   string    `gorm:"column:nickname" json:"nickname"`
	Type       int8      `gorm:"column:type" json:"type"`
	CreateTime time.Time `gorm:"column:create_time" json:"createTime"`
	UpdateTime time.Time `gorm:"column:update_time" json:"updateTime"`
	TypeCount  int8      `gorm:"column:typeCount" json:"typeCount"`
}

// FindOneByNameLikeWhereParameter is a where parameter structure.
type FindOneByNameLikeWhereParameter struct {
	NameLike string
}

// FindAllByNameNotLikeWhereParameter is a where parameter structure.
type FindAllByNameNotLikeWhereParameter struct {
	NameNotLike string
}

// FindAllByIdInWhereParameter is a where parameter structure.
type FindAllByIdInWhereParameter struct {
	IdIn []uint64
}

// FindAllByIdNotInWhereParameter is a where parameter structure.
type FindAllByIdNotInWhereParameter struct {
	IdNotIn []uint64
}

// FindAllByIdBetweenWhereParameter is a where parameter structure.
type FindAllByIdBetweenWhereParameter struct {
	IdBetweenStart uint64
	IdBetweenEnd   uint64
}

// FindAllByIdNotBetweenWhereParameter is a where parameter structure.
type FindAllByIdNotBetweenWhereParameter struct {
	IdNotBetweenStart uint64
	IdNotBetweenEnd   uint64
}

// FindAllByIdGteWhereParameter is a where parameter structure.
type FindAllByIdGteWhereParameter struct {
	IdGE uint64
}

// FindAllByIdLteWhereParameter is a where parameter structure.
type FindAllByIdLteWhereParameter struct {
	IdLE uint64
}

// FindAllByIdNeqWhereParameter is a where parameter structure.
type FindAllByIdNeqWhereParameter struct {
	IdNE uint64
}

// FindAllByIdInOrNotInWhereParameter is a where parameter structure.
type FindAllByIdInOrNotInWhereParameter struct {
	IdIn    []uint64
	IdNotIn []uint64
}

// ComplexQueryWhereParameter is a where parameter structure.
type ComplexQueryWhereParameter struct {
	IdGT                uint64
	IdLT                uint64
	IdNE                uint64
	IdIn                []uint64
	IdNotIn             []uint64
	IdBetweenStart      uint64
	IdBetweenEnd        uint64
	IdNotBetweenStart   uint64
	IdNotBetweenEnd     uint64
	IdGE                uint64
	IdLE                uint64
	IdNE1               uint64
	NameLike            string
	NameNotLike         string
	NameIn              []string
	NameNotIn           []string
	NameBetweenStart    string
	NameBetweenEnd      string
	NameNotBetweenStart string
	NameNotBetweenEnd   string
	NameGE              string
	NameLE              string
	NameNE              string
}

// TableName returns the table name. it implemented by gorm.Tabler.
func (User) TableName() string {
	return "user"
}

// NewUserModel returns a new user model.
func NewUserModel(db gorm.DB) *UserModel {
	return &UserModel{db: db}
}

// Create creates  user data.
func (m *UserModel) Create(ctx context.Context, data ...*User) error {
	if len(data) == 0 {
		return fmt.Errorf("data is empty")
	}

	db := m.db.WithContext(ctx)
	var list []User
	for _, v := range data {
		list = append(list, *v)
	}

	return db.Create(&list).Error
}

// FindOne is generated from sql:
// select * from user where id = ? limit 1;
func (m *UserModel) FindOne(ctx context.Context, where FindOneWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id = ?`, where.IdEqual)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindByName is generated from sql:
// select * from user where name = ? limit 1;
func (m *UserModel) FindByName(ctx context.Context, where FindByNameWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`name = ?`, where.NameEqual)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindOnePart is generated from sql:
// select id, name, nickname from user where id = ? limit 1;
func (m *UserModel) FindOnePart(ctx context.Context, where FindOnePartWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`id, name, nickname`)
	db.Where(`id = ?`, where.IdEqual)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindByNamePart is generated from sql:
// select id, name, nickname from user where name = ? limit 1;
func (m *UserModel) FindByNamePart(ctx context.Context, where FindByNamePartWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`id, name, nickname`)
	db.Where(`name = ?`, where.NameEqual)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindAll is generated from sql:
// select * from user;
func (m *UserModel) FindAll(ctx context.Context) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Find(&result)
	return result, db.Error
}

// FindAllCount is generated from sql:
// select count(*) AS count from user;
func (m *UserModel) FindAllCount(ctx context.Context) (*FindAllCountResult, error) {
	var result = new(FindAllCountResult)
	var db = m.db.WithContext(ctx)
	db.Select(`count(1) AS count`)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindAllPart is generated from sql:
// select id, name, nickname from user;
func (m *UserModel) FindAllPart(ctx context.Context) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`id, name, nickname`)
	db.Find(&result)
	return result, db.Error
}

// FindAllPartCount is generated from sql:
// select count(id) AS count from user;
func (m *UserModel) FindAllPartCount(ctx context.Context) (*FindAllPartCountResult, error) {
	var result = new(FindAllPartCountResult)
	var db = m.db.WithContext(ctx)
	db.Select(`count(id) AS count`)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindOneByNameAndPassword is generated from sql:
// select * from user where name = ? and password = ? limit 1;
func (m *UserModel) FindOneByNameAndPassword(ctx context.Context, where FindOneByNameAndPasswordWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`name = ? AND password = ?`, where.NameEqual, where.PasswordEqual)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// ListUserByNameAsc is generated from sql:
// select * from user where id > ? group by name;
func (m *UserModel) ListUserByNameAsc(ctx context.Context, where ListUserByNameAscWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id > ?`, where.IdGT)
	db.Group(`name`)
	db.Find(&result)
	return result, db.Error
}

// ListUserByNameAscHavingCountTypeGt is generated from sql:
// select *, count(type) AS typeCount from user where id > ? group by name having typeCount > ?;
func (m *UserModel) ListUserByNameAscHavingCountTypeGt(ctx context.Context, where ListUserByNameAscHavingCountTypeGtWhereParameter, having ListUserByNameAscHavingCountTypeGtHavingParameter) ([]*ListUserByNameAscHavingCountTypeGtResult, error) {
	var result []*ListUserByNameAscHavingCountTypeGtResult
	var db = m.db.WithContext(ctx)
	db.Select(`*, count(type) AS typeCount`)
	db.Where(`id > ?`, where.IdGT)
	db.Group(`name`)
	db.Having(`typeCount > ?`, having.TypeCountGT)
	db.Find(&result)
	return result, db.Error
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDesc is generated from sql:
// select *, count(type) AS typeCount from user where id > ? group by name having typeCount > ? order by id desc;
func (m *UserModel) ListUserByNameDescHavingCountTypeGtOrderByIdDesc(ctx context.Context, where ListUserByNameDescHavingCountTypeGtOrderByIdDescWhereParameter, having ListUserByNameDescHavingCountTypeGtOrderByIdDescHavingParameter) ([]*ListUserByNameDescHavingCountTypeGtOrderByIdDescResult, error) {
	var result []*ListUserByNameDescHavingCountTypeGtOrderByIdDescResult
	var db = m.db.WithContext(ctx)
	db.Select(`*, count(type) AS typeCount`)
	db.Where(`id > ?`, where.IdGT)
	db.Group(`name`)
	db.Having(`typeCount > ?`, having.TypeCountGT)
	db.Order(`id desc`)
	db.Find(&result)
	return result, db.Error
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10 is generated from sql:
// select *, count(type) AS typeCount from user where id > ? group by name having typeCount > ? order by id desc limit 10;
func (m *UserModel) ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10(ctx context.Context, where ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10WhereParameter, having ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10HavingParameter, limit ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10LimitParameter) ([]*ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Result, error) {
	var result []*ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Result
	var db = m.db.WithContext(ctx)
	db.Select(`*, count(type) AS typeCount`)
	db.Where(`id > ?`, where.IdGT)
	db.Group(`name`)
	db.Having(`typeCount > ?`, having.TypeCountGT)
	db.Order(`id desc`)
	db.Limit(limit.Count)
	db.Find(&result)
	return result, db.Error
}

// ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10 is generated from sql:
// select *, count(type) AS typeCount from user where id > ? group by name having typeCount > ? order by id desc limit 10, 10;
func (m *UserModel) ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10(ctx context.Context, where ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10WhereParameter, having ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10HavingParameter, limit ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10LimitParameter) ([]*ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10Result, error) {
	var result []*ListUserByNameDescHavingCountTypeGtOrderByIdDescLimit10Offset10Result
	var db = m.db.WithContext(ctx)
	db.Select(`*, count(type) AS typeCount`)
	db.Where(`id > ?`, where.IdGT)
	db.Group(`name`)
	db.Having(`typeCount > ?`, having.TypeCountGT)
	db.Order(`id desc`)
	db.Offset(limit.Offset).Limit(limit.Count)
	db.Find(&result)
	return result, db.Error
}

// FindOneByNameLike is generated from sql:
// select * from user where name like ? limit 1;
func (m *UserModel) FindOneByNameLike(ctx context.Context, where FindOneByNameLikeWhereParameter) (*User, error) {
	var result = new(User)
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`name LIKE ?`, where.NameLike)
	db.Limit(1)
	db.Find(result)
	return result, db.Error
}

// FindAllByNameNotLike is generated from sql:
// select * from user where name not like ?;
func (m *UserModel) FindAllByNameNotLike(ctx context.Context, where FindAllByNameNotLikeWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`name NOT LIKE ?`, where.NameNotLike)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdIn is generated from sql:
// select * from user where id in (?);
func (m *UserModel) FindAllByIdIn(ctx context.Context, where FindAllByIdInWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id IN (?)`, where.IdIn)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdNotIn is generated from sql:
// select * from user where id not in (?);
func (m *UserModel) FindAllByIdNotIn(ctx context.Context, where FindAllByIdNotInWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id NOT IN (?)`, where.IdNotIn)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdBetween is generated from sql:
// select * from user where id between ? and ?;
func (m *UserModel) FindAllByIdBetween(ctx context.Context, where FindAllByIdBetweenWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id BETWEEN ? AND ?`, where.IdBetweenStart, where.IdBetweenEnd)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdNotBetween is generated from sql:
// select * from user where id not between ? and ?;
func (m *UserModel) FindAllByIdNotBetween(ctx context.Context, where FindAllByIdNotBetweenWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id NOT BETWEEN ? AND ?`, where.IdNotBetweenStart, where.IdNotBetweenEnd)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdGte is generated from sql:
// select * from user where id >= ?;
func (m *UserModel) FindAllByIdGte(ctx context.Context, where FindAllByIdGteWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id >= ?`, where.IdGE)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdLte is generated from sql:
// select * from user where id <= ?;
func (m *UserModel) FindAllByIdLte(ctx context.Context, where FindAllByIdLteWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id <= ?`, where.IdLE)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdNeq is generated from sql:
// select * from user where id != ?;
func (m *UserModel) FindAllByIdNeq(ctx context.Context, where FindAllByIdNeqWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id != ?`, where.IdNE)
	db.Find(&result)
	return result, db.Error
}

// FindAllByIdInOrNotIn is generated from sql:
// select * from user where id in (?) or id not in (?);
func (m *UserModel) FindAllByIdInOrNotIn(ctx context.Context, where FindAllByIdInOrNotInWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id IN (?) OR id NOT IN (?)`, where.IdIn, where.IdNotIn)
	db.Find(&result)
	return result, db.Error
}

// ComplexQuery is generated from sql:
// select * from user where id > ? and id < ? and id != ? and id in (?) and id not in (?) and id between ? and ? and id not between ? and ? and id >= ? and id <= ? and id != ? and name like ? and name not like ? and name in (?) and name not in (?) and name between ? and ? and name not between ? and ? and name >= ? and name <= ? and name != ?;
func (m *UserModel) ComplexQuery(ctx context.Context, where ComplexQueryWhereParameter) ([]*User, error) {
	var result []*User
	var db = m.db.WithContext(ctx)
	db.Select(`*`)
	db.Where(`id > ? AND id < ? AND id != ? AND id IN (?) AND id NOT IN (?) AND id BETWEEN ? AND ? AND id NOT BETWEEN ? AND ? AND id >= ? AND id <= ? AND id != ? AND name LIKE ? AND name NOT LIKE ? AND name IN (?) AND name NOT IN (?) AND name BETWEEN ? AND ? AND name NOT BETWEEN ? AND ? AND name >= ? AND name <= ? AND name != ?`, where.IdGT, where.IdLT, where.IdNE, where.IdIn, where.IdNotIn, where.IdBetweenStart, where.IdBetweenEnd, where.IdNotBetweenStart, where.IdNotBetweenEnd, where.IdGE, where.IdLE, where.IdNE1, where.NameLike, where.NameNotLike, where.NameIn, where.NameNotIn, where.NameBetweenStart, where.NameBetweenEnd, where.NameNotBetweenStart, where.NameNotBetweenEnd, where.NameGE, where.NameLE, where.NameNE)
	db.Find(&result)
	return result, db.Error
}
